# -*- coding: utf-8 -*-
"""DS_Task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pVyGCTV5XIXCqLUw8Wn2mGbTRuTZH4ik
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

data_json=pd.read_json("/content/P1- BankStatements.json")

data_json

from pandas import json_normalize
import json

with open('/content/P1- BankStatements.json') as f:
    data_final = json.load(f)

print(data_final)

# Flatten the JSON data to extract transactions
transactions = data_final.get('Account', {}).get('Transactions', {}).get('Transaction', [])

# Normalize the transactions data
transactions_df = json_normalize(transactions)

transactions_df.head(100)

transactions_df.info()

transactions_df['amount'] = transactions_df['amount'].astype(float)

transactions_df.info()

transactions_df['currentBalance'] = transactions_df['currentBalance'].astype(float)

transactions_df.info()

median_amount=transactions_df['amount'].median()

mean_amount=transactions_df['amount'].mean()

transactions_df['amount'].sum()

plt.figure(figsize=(10, 6))
plt.hist(transactions_df['amount'], bins=10, edgecolor='black')
plt.axvline(mean_amount, color='red', linestyle='dashed', linewidth=1, label=f'Mean: {mean_amount:.2f}')
plt.axvline(median_amount, color='green', linestyle='dashed', linewidth=1, label=f'Median: {median_amount:.2f}')
plt.xlabel('Transaction Amount')
plt.ylabel('Frequency')
plt.title('Distribution of Transaction Amounts')
plt.legend()
plt.grid(True)
plt.show()

plt.hist(transactions_df['amount'], bins=50, edgecolor='black')

small_threshold = 160
large_threshold = 855
small_transactions = transactions_df[transactions_df['amount'] <= small_threshold]['amount'].count()
large_transactions = transactions_df[transactions_df['amount'] > large_threshold]['amount'].count()
print(f"Small transactions: {small_transactions}")
print(f"Large transactions: {large_transactions}")

plt.figure(figsize=(8, 6))
plt.bar('Small Transactions', small_transactions, color='blue', alpha=0.7, align='center')
plt.bar('Large Transactions', large_transactions, color='red', alpha=0.7, align='center')
plt.xlabel('Transaction Type')
plt.ylabel('Number of Transactions')
plt.title('Number of Small and Large Transactions')
plt.show()

transaction_counts = transactions_df['type'].value_counts()
plt.figure(figsize=(8, 6))
plt.bar(transaction_counts.index, transaction_counts.values)
plt.xlabel('Transaction Type')
plt.ylabel('Frequency')
plt.title('Transaction Amount by Type')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

transaction_counts

"""## **Balance Analysis**"""

plt.figure(figsize=(12, 6))
sns.lineplot(data=transactions_df,x='transactionTimestamp', y='currentBalance', color='b')
plt.show()

transactions_df['currentBalance'].min()

transactions_df['currentBalance'].max()

transactions_df['transactionTimestamp'] = pd.to_datetime(transactions_df['transactionTimestamp'])
transactions_df = transactions_df.sort_values(by='transactionTimestamp')
transactions_df['balance_diff'] = transactions_df['currentBalance'].diff()
threshold = 5000
transactions_df['significant_change'] = transactions_df['balance_diff'].abs() > threshold

sns.set_style("whitegrid")
plt.figure(figsize=(12, 6))
sns.lineplot(x='transactionTimestamp', y='currentBalance', data=transactions_df, color='b')
sns.scatterplot(x='transactionTimestamp', y='currentBalance', data=transactions_df[transactions_df['significant_change']], color='r', s=100, label='Significant Change')
plt.title('Trend of Account Balance Over Time')
plt.xlabel('Transaction Timestamp')
plt.ylabel('Current Balance')
plt.xticks(rotation=45)
plt.legend()
plt.grid(True)
plt.show()

"""# **Spending Patterns**"""

def categorize_expense(narration, type, mode):
  if 'DEBIT' in type:
    if 'FILLING STATIO' in narration:
        return 'Fuel'
    elif 'ATM' in narration or mode == 'ATM':
        return 'ATM Withdrawal'
    elif 'UPI' in narration or mode == 'UPI':
        return 'UPI Transaction'
    else:
        return 'Other'
transactions_df['category'] = transactions_df.apply(lambda row: categorize_expense(row['narration'], row['type'],row['mode']), axis=1)

expense_summary = transactions_df[transactions_df['type'] == 'DEBIT'].groupby('category')['amount'].sum().reset_index()
print(expense_summary)

transactions_df['category'].value_counts()

plt.figure(figsize=(10, 6))
sns.histplot(data=transactions_df, x='category')
plt.show()

debit_transactions = transactions_df[transactions_df['type'] == 'DEBIT']
plt.figure(figsize=(12, 6))
sns.boxplot(x='category', y='amount', data=debit_transactions)
plt.title('Distribution of Transaction Amounts Across Categories')
plt.xlabel('Expense Category')
plt.ylabel('Transaction Amount')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

"""# **Income Analysis**"""

df_income=transactions_df[transactions_df['type']=='CREDIT']

df_income['mode'].value_counts()

amount=df_income.groupby('mode')['amount'].sum().reset_index()
amount

figsize=(10,6)
plt.figure(figsize=figsize)
sns.lineplot(data=df_income, x='transactionTimestamp',y='amount')
plt.show()

